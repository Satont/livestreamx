// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodel

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
)

type ChatMessageReaction interface {
	IsChatMessageReaction()
	GetID() string
	GetType() ChatMessageReactionType
	GetUserID() uuid.UUID
	GetUser() *ChatUser
	GetReaction() string
	GetMessageID() string
}

type MessageSegment interface {
	IsMessageSegment()
	GetType() MessageSegmentType
	GetContent() string
}

type SystemMessage interface {
	IsSystemMessage()
	GetType() SystemMessageType
}

type User interface {
	IsUser()
	GetID() uuid.UUID
	GetName() string
	GetDisplayName() string
	GetColor() string
	GetIsBanned() bool
	GetCreatedAt() time.Time
	GetAvatarURL() string
	GetIsAdmin() bool
}

type AttachedFile struct {
	ID        string    `json:"id"`
	URL       string    `json:"url"`
	Name      string    `json:"name"`
	Size      int       `json:"size"`
	MimeType  string    `json:"mimeType"`
	CreatedAt time.Time `json:"createdAt"`
}

type AuthedUser struct {
	ID          uuid.UUID            `json:"id"`
	Name        string               `json:"name"`
	DisplayName string               `json:"displayName"`
	Color       string               `json:"color"`
	IsBanned    bool                 `json:"isBanned"`
	CreatedAt   time.Time            `json:"createdAt"`
	AvatarURL   string               `json:"avatarUrl"`
	IsAdmin     bool                 `json:"isAdmin"`
	Providers   []AuthedUserProvider `json:"providers"`
	StreamKey   uuid.UUID            `json:"streamKey"`
}

func (AuthedUser) IsUser()                      {}
func (this AuthedUser) GetID() uuid.UUID        { return this.ID }
func (this AuthedUser) GetName() string         { return this.Name }
func (this AuthedUser) GetDisplayName() string  { return this.DisplayName }
func (this AuthedUser) GetColor() string        { return this.Color }
func (this AuthedUser) GetIsBanned() bool       { return this.IsBanned }
func (this AuthedUser) GetCreatedAt() time.Time { return this.CreatedAt }
func (this AuthedUser) GetAvatarURL() string    { return this.AvatarURL }
func (this AuthedUser) GetIsAdmin() bool        { return this.IsAdmin }

type AuthedUserProvider struct {
	Provider    AuthedUserProviderType `json:"provider"`
	UserID      string                 `json:"userId"`
	Name        string                 `json:"name"`
	DisplayName string                 `json:"displayName"`
	AvatarURL   string                 `json:"avatarUrl"`
}

type BanUser struct {
	UserID   string `json:"userId"`
	NewValue bool   `json:"newValue"`
}

type BaseUser struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	DisplayName string    `json:"displayName"`
	Color       string    `json:"color"`
	IsBanned    bool      `json:"isBanned"`
	CreatedAt   time.Time `json:"createdAt"`
	AvatarURL   string    `json:"avatarUrl"`
	IsAdmin     bool      `json:"isAdmin"`
}

func (BaseUser) IsUser()                      {}
func (this BaseUser) GetID() uuid.UUID        { return this.ID }
func (this BaseUser) GetName() string         { return this.Name }
func (this BaseUser) GetDisplayName() string  { return this.DisplayName }
func (this BaseUser) GetColor() string        { return this.Color }
func (this BaseUser) GetIsBanned() bool       { return this.IsBanned }
func (this BaseUser) GetCreatedAt() time.Time { return this.CreatedAt }
func (this BaseUser) GetAvatarURL() string    { return this.AvatarURL }
func (this BaseUser) GetIsAdmin() bool        { return this.IsAdmin }

type ChatMessage struct {
	ID        string                `json:"id"`
	ChannelID uuid.UUID             `json:"channelId"`
	Segments  []MessageSegment      `json:"segments"`
	SenderID  uuid.UUID             `json:"senderId"`
	Sender    *ChatUser             `json:"sender"`
	CreatedAt time.Time             `json:"createdAt"`
	Reactions []ChatMessageReaction `json:"reactions"`
	ReplyTo   *uuid.UUID            `json:"replyTo,omitempty"`
}

type ChatMessageReactionEmoji struct {
	ID        string                  `json:"id"`
	Type      ChatMessageReactionType `json:"type"`
	UserID    uuid.UUID               `json:"userId"`
	User      *ChatUser               `json:"user"`
	Reaction  string                  `json:"reaction"`
	MessageID string                  `json:"messageId"`
}

func (ChatMessageReactionEmoji) IsChatMessageReaction()                {}
func (this ChatMessageReactionEmoji) GetID() string                    { return this.ID }
func (this ChatMessageReactionEmoji) GetType() ChatMessageReactionType { return this.Type }
func (this ChatMessageReactionEmoji) GetUserID() uuid.UUID             { return this.UserID }
func (this ChatMessageReactionEmoji) GetUser() *ChatUser               { return this.User }
func (this ChatMessageReactionEmoji) GetReaction() string              { return this.Reaction }
func (this ChatMessageReactionEmoji) GetMessageID() string             { return this.MessageID }

type ChatMessageReactionEmote struct {
	ID        string                  `json:"id"`
	Type      ChatMessageReactionType `json:"type"`
	UserID    uuid.UUID               `json:"userId"`
	User      *ChatUser               `json:"user"`
	Reaction  string                  `json:"reaction"`
	Emote     *Emote                  `json:"emote"`
	MessageID string                  `json:"messageId"`
}

func (ChatMessageReactionEmote) IsChatMessageReaction()                {}
func (this ChatMessageReactionEmote) GetID() string                    { return this.ID }
func (this ChatMessageReactionEmote) GetType() ChatMessageReactionType { return this.Type }
func (this ChatMessageReactionEmote) GetUserID() uuid.UUID             { return this.UserID }
func (this ChatMessageReactionEmote) GetUser() *ChatUser               { return this.User }
func (this ChatMessageReactionEmote) GetReaction() string              { return this.Reaction }
func (this ChatMessageReactionEmote) GetMessageID() string             { return this.MessageID }

type ChatUser struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	DisplayName string    `json:"displayName"`
	Color       string    `json:"color"`
	IsBanned    bool      `json:"isBanned"`
	CreatedAt   time.Time `json:"createdAt"`
	AvatarURL   string    `json:"avatarUrl"`
	IsAdmin     bool      `json:"isAdmin"`
	Roles       []Role    `json:"roles"`
}

func (ChatUser) IsUser()                      {}
func (this ChatUser) GetID() uuid.UUID        { return this.ID }
func (this ChatUser) GetName() string         { return this.Name }
func (this ChatUser) GetDisplayName() string  { return this.DisplayName }
func (this ChatUser) GetColor() string        { return this.Color }
func (this ChatUser) GetIsBanned() bool       { return this.IsBanned }
func (this ChatUser) GetCreatedAt() time.Time { return this.CreatedAt }
func (this ChatUser) GetAvatarURL() string    { return this.AvatarURL }
func (this ChatUser) GetIsAdmin() bool        { return this.IsAdmin }

type Chatter struct {
	UserID uuid.UUID `json:"userId"`
	User   *BaseUser `json:"user"`
}

type CreateRoleInput struct {
	Name     string                     `json:"name"`
	ImageURL graphql.Omittable[*string] `json:"imageUrl,omitempty"`
	Features []RoleFeature              `json:"features"`
}

type Emote struct {
	ID     string `json:"id"`
	Name   string `json:"name"`
	URL    string `json:"url"`
	Width  int    `json:"width"`
	Height int    `json:"height"`
}

type MessageSegmentEmote struct {
	Content string             `json:"content"`
	Type    MessageSegmentType `json:"type"`
	Emote   *Emote             `json:"emote"`
}

func (MessageSegmentEmote) IsMessageSegment()                {}
func (this MessageSegmentEmote) GetType() MessageSegmentType { return this.Type }
func (this MessageSegmentEmote) GetContent() string          { return this.Content }

type MessageSegmentLink struct {
	Content string             `json:"content"`
	Type    MessageSegmentType `json:"type"`
}

func (MessageSegmentLink) IsMessageSegment()                {}
func (this MessageSegmentLink) GetType() MessageSegmentType { return this.Type }
func (this MessageSegmentLink) GetContent() string          { return this.Content }

type MessageSegmentMention struct {
	Content string             `json:"content"`
	Type    MessageSegmentType `json:"type"`
	UserID  uuid.UUID          `json:"userId"`
	User    *ChatUser          `json:"user"`
}

func (MessageSegmentMention) IsMessageSegment()                {}
func (this MessageSegmentMention) GetType() MessageSegmentType { return this.Type }
func (this MessageSegmentMention) GetContent() string          { return this.Content }

type MessageSegmentText struct {
	Content string             `json:"content"`
	Type    MessageSegmentType `json:"type"`
}

func (MessageSegmentText) IsMessageSegment()                {}
func (this MessageSegmentText) GetType() MessageSegmentType { return this.Type }
func (this MessageSegmentText) GetContent() string          { return this.Content }

type Mutation struct {
}

type Query struct {
}

type Role struct {
	ID        uuid.UUID     `json:"id"`
	ChannelID uuid.UUID     `json:"channelId"`
	Name      string        `json:"name"`
	ImageURL  *string       `json:"imageUrl,omitempty"`
	Features  []RoleFeature `json:"features"`
}

type SendMessageInput struct {
	ChannelID uuid.UUID                     `json:"channelId"`
	Text      string                        `json:"text"`
	ReplyTo   graphql.Omittable[*uuid.UUID] `json:"replyTo,omitempty"`
}

type Stream struct {
	Viewers      int        `json:"viewers"`
	Chatters     []Chatter  `json:"chatters"`
	StartedAt    *time.Time `json:"startedAt,omitempty"`
	ChannelID    uuid.UUID  `json:"channelId"`
	Channel      *BaseUser  `json:"channel"`
	ThumbnailURL string     `json:"thumbnailUrl"`
}

type Subscription struct {
}

type SystemMessageEmoteAdded struct {
	Type  SystemMessageType `json:"type"`
	Emote *Emote            `json:"emote"`
}

func (SystemMessageEmoteAdded) IsSystemMessage()                {}
func (this SystemMessageEmoteAdded) GetType() SystemMessageType { return this.Type }

type SystemMessageEmoteRemoved struct {
	Type    SystemMessageType `json:"type"`
	EmoteID string            `json:"emoteId"`
}

func (SystemMessageEmoteRemoved) IsSystemMessage()                {}
func (this SystemMessageEmoteRemoved) GetType() SystemMessageType { return this.Type }

type SystemMessageEmoteUpdated struct {
	Type  SystemMessageType `json:"type"`
	Emote *Emote            `json:"emote"`
}

func (SystemMessageEmoteUpdated) IsSystemMessage()                {}
func (this SystemMessageEmoteUpdated) GetType() SystemMessageType { return this.Type }

type UpdateRoleInput struct {
	Name     graphql.Omittable[*string]       `json:"name,omitempty"`
	ImageURL graphql.Omittable[*string]       `json:"imageUrl,omitempty"`
	Features graphql.Omittable[[]RoleFeature] `json:"features,omitempty"`
}

type UpdateUserProfileInput struct {
	Color       graphql.Omittable[*string] `json:"color,omitempty"`
	Name        graphql.Omittable[*string] `json:"name,omitempty"`
	DisplayName graphql.Omittable[*string] `json:"displayName,omitempty"`
}

type AuthedUserProviderType string

const (
	AuthedUserProviderTypeTwitch AuthedUserProviderType = "TWITCH"
	AuthedUserProviderTypeGithub AuthedUserProviderType = "GITHUB"
)

var AllAuthedUserProviderType = []AuthedUserProviderType{
	AuthedUserProviderTypeTwitch,
	AuthedUserProviderTypeGithub,
}

func (e AuthedUserProviderType) IsValid() bool {
	switch e {
	case AuthedUserProviderTypeTwitch, AuthedUserProviderTypeGithub:
		return true
	}
	return false
}

func (e AuthedUserProviderType) String() string {
	return string(e)
}

func (e *AuthedUserProviderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthedUserProviderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthedUserProviderType", str)
	}
	return nil
}

func (e AuthedUserProviderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChatMessageReactionType string

const (
	ChatMessageReactionTypeEmoji ChatMessageReactionType = "EMOJI"
	ChatMessageReactionTypeEmote ChatMessageReactionType = "EMOTE"
)

var AllChatMessageReactionType = []ChatMessageReactionType{
	ChatMessageReactionTypeEmoji,
	ChatMessageReactionTypeEmote,
}

func (e ChatMessageReactionType) IsValid() bool {
	switch e {
	case ChatMessageReactionTypeEmoji, ChatMessageReactionTypeEmote:
		return true
	}
	return false
}

func (e ChatMessageReactionType) String() string {
	return string(e)
}

func (e *ChatMessageReactionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChatMessageReactionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChatMessageReactionType", str)
	}
	return nil
}

func (e ChatMessageReactionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MessageSegmentType string

const (
	MessageSegmentTypeText    MessageSegmentType = "TEXT"
	MessageSegmentTypeLink    MessageSegmentType = "LINK"
	MessageSegmentTypeMention MessageSegmentType = "MENTION"
	MessageSegmentTypeEmote   MessageSegmentType = "EMOTE"
)

var AllMessageSegmentType = []MessageSegmentType{
	MessageSegmentTypeText,
	MessageSegmentTypeLink,
	MessageSegmentTypeMention,
	MessageSegmentTypeEmote,
}

func (e MessageSegmentType) IsValid() bool {
	switch e {
	case MessageSegmentTypeText, MessageSegmentTypeLink, MessageSegmentTypeMention, MessageSegmentTypeEmote:
		return true
	}
	return false
}

func (e MessageSegmentType) String() string {
	return string(e)
}

func (e *MessageSegmentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageSegmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageSegmentType", str)
	}
	return nil
}

func (e MessageSegmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoleFeature string

const (
	RoleFeatureBanUsers RoleFeature = "BAN_USERS"
)

var AllRoleFeature = []RoleFeature{
	RoleFeatureBanUsers,
}

func (e RoleFeature) IsValid() bool {
	switch e {
	case RoleFeatureBanUsers:
		return true
	}
	return false
}

func (e RoleFeature) String() string {
	return string(e)
}

func (e *RoleFeature) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleFeature(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleFeature", str)
	}
	return nil
}

func (e RoleFeature) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SystemMessageType string

const (
	SystemMessageTypeEmoteAdded   SystemMessageType = "EMOTE_ADDED"
	SystemMessageTypeEmoteRemoved SystemMessageType = "EMOTE_REMOVED"
	SystemMessageTypeEmoteUpdated SystemMessageType = "EMOTE_UPDATED"
)

var AllSystemMessageType = []SystemMessageType{
	SystemMessageTypeEmoteAdded,
	SystemMessageTypeEmoteRemoved,
	SystemMessageTypeEmoteUpdated,
}

func (e SystemMessageType) IsValid() bool {
	switch e {
	case SystemMessageTypeEmoteAdded, SystemMessageTypeEmoteRemoved, SystemMessageTypeEmoteUpdated:
		return true
	}
	return false
}

func (e SystemMessageType) String() string {
	return string(e)
}

func (e *SystemMessageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemMessageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemMessageType", str)
	}
	return nil
}

func (e SystemMessageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
