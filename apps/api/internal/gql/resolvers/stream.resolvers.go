package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/satont/stream/apps/api/internal/gql/gqlmodel"
)

// Stream is the resolver for the stream field.
func (r *queryResolver) Stream(ctx context.Context) (*gqlmodel.Stream, error) {
	panic(fmt.Errorf("not implemented: Stream - stream"))
}

// StreamInfo is the resolver for the streamInfo field.
func (r *subscriptionResolver) StreamInfo(ctx context.Context, channelID uuid.UUID) (<-chan *gqlmodel.Stream, error) {
	// userID, userIdErr := r.sessionStorage.GetUserID(ctx)
	// if userIdErr == nil {
	// 	user, err := r.userRepo.FindByID(ctx, uuid.MustParse(userID))
	// 	if err != nil {
	// 		return nil, err
	// 	}
	//
	// 	chattersLock.Lock()
	// 	r.streamChatters[user.ID.String()] = gqlmodel.Chatter{
	// 		User: &gqlmodel.User{
	// 			ID:          user.ID.String(),
	// 			Name:        user.Name,
	// 			DisplayName: user.DisplayName,
	// 			Color:       user.Color,
	// 			Roles:       nil,
	// 			IsBanned:    user.Banned,
	// 			CreatedAt:   user.CreatedAt,
	// 			AvatarURL:   user.AvatarUrl,
	// 		},
	// 	}
	//
	// 	chattersLock.Unlock()
	// }

	channel := make(chan *gqlmodel.Stream, 1)

	go func() {
		defer close(channel)

		for {
			select {
			case <-ctx.Done():
				return
			default:
				streamInfo := &gqlmodel.Stream{
					Viewers:   0,
					Chatters:  nil,
					StartedAt: nil,
				}

				channel <- streamInfo
				time.Sleep(1 * time.Second)
			}
		}
	}()

	return channel, nil
}
