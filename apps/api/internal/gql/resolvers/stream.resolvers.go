package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/goccy/go-json"
	"github.com/google/uuid"
	"github.com/satont/stream/apps/api/internal/gql/gqlmodel"
	"github.com/satont/stream/apps/api/internal/httpserver/middlewares"
	userrepo "github.com/satont/stream/apps/api/internal/repositories/user"
	"golang.org/x/sync/errgroup"
)

// Streams is the resolver for the streams field.
func (r *queryResolver) Streams(ctx context.Context) ([]gqlmodel.Stream, error) {
	paths, err := r.mtxApi.GetPaths(ctx)
	if err != nil {
		return nil, err
	}

	var streamsMu sync.Mutex
	var streams []gqlmodel.Stream
	var errwg errgroup.Group

	for _, path := range paths {
		path := path
		errwg.Go(
			func() error {
				parsedStreamKey, err := uuid.Parse(path.Name)
				if err != nil {
					return err
				}

				dbChannel, err := r.userRepo.FindByStreamKey(ctx, parsedStreamKey)
				if err != nil {
					return err
				}

				streamsMu.Lock()
				defer streamsMu.Unlock()

				c := r.mapper.DbUserToGql(*dbChannel)

				streams = append(
					streams,
					gqlmodel.Stream{
						Viewers:   len(path.Readers),
						Chatters:  nil,
						StartedAt: nil,
						Channel:   &c,
					},
				)

				return nil
			},
		)
	}

	if err := errwg.Wait(); err != nil {
		return nil, err
	}

	return streams, nil
}

// StreamInfo is the resolver for the streamInfo field.
func (r *subscriptionResolver) StreamInfo(ctx context.Context, channelID uuid.UUID) (<-chan *gqlmodel.Stream, error) {
	dbChannel, err := r.userRepo.FindByID(ctx, channelID)
	if err != nil {
		return nil, err
	}

	chattersRedisKey := fmt.Sprintf("streams:chatters:%s", channelID.String())
	user := middlewares.GetUserFromContext(ctx)
	if user != nil {
		userBytes, err := json.Marshal(user)
		if err != nil {
			r.logger.Sugar().Error(err)
			return nil, err
		}
		userChatterKey := fmt.Sprintf("%s:%s", chattersRedisKey, user.ID)
		if err := r.redis.Set(ctx, userChatterKey, userBytes, 48*time.Hour).Err(); err != nil {
			return nil, err
		}
	}

	channel := make(chan *gqlmodel.Stream, 1)

	go func() {
		defer close(channel)

		for {
			select {
			case <-ctx.Done():
				if user != nil {
					userChatterKey := fmt.Sprintf("%s:%s", chattersRedisKey, user.ID)
					if err := r.redis.Del(context.Background(), userChatterKey).Err(); err != nil {
						r.logger.Sugar().Error(err)
					}
				}
				return
			default:
				mtxInfo, err := r.mtxApi.GetPathInfoByApyKey(ctx, dbChannel.StreamKey.String())
				if err != nil {
					r.logger.Sugar().Error(err)
					time.Sleep(1 * time.Second)
					continue
				}

				var chatters []gqlmodel.Chatter
				iter := r.redis.Scan(ctx, 0, fmt.Sprintf("%s:*", chattersRedisKey), 0).Iterator()
				for iter.Next(ctx) {
					key := iter.Val()
					val, err := r.redis.Get(ctx, key).Bytes()
					if err != nil {
						r.logger.Sugar().Error(err)
						continue
					}

					var u userrepo.User
					if err := json.Unmarshal(val, &u); err != nil {
						r.logger.Sugar().Error(err)
						continue
					}

					gqlUser := r.mapper.DbUserToGql(u)

					chatters = append(
						chatters,
						gqlmodel.Chatter{
							User: &gqlUser,
						},
					)
				}
				if err := iter.Err(); err != nil {
					r.logger.Sugar().Error(err)
					time.Sleep(1 * time.Second)
					continue
				}

				gqlChannel := r.mapper.DbUserToGql(*dbChannel)

				streamInfo := &gqlmodel.Stream{
					Viewers:   len(mtxInfo.Readers),
					Chatters:  chatters,
					StartedAt: mtxInfo.ReadyTime,
					Channel:   &gqlChannel,
				}

				channel <- streamInfo
				time.Sleep(1 * time.Second)
			}
		}
	}()

	return channel, nil
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) Stream(ctx context.Context) (*gqlmodel.Stream, error) {
	panic(fmt.Errorf("not implemented: Stream - stream"))
}
