extend type Query {
    userProfile: AuthedUser! @isAuthenticated
    fetchUserByName(name: String!): User!
    fetchUserById(id: UUID!): User!
}

extend type Mutation {
    updateUserProfile(input: UpdateUserProfileInput!): AuthedUser! @isAuthenticated
    deleteAccount: Boolean! @isAuthenticated
    logout: Boolean! @isAuthenticated
}

interface User {
    id: UUID!
    name: String!
    displayName: String!
    color: String!
    isBanned: Boolean!
    createdAt: Time!
    avatarUrl: String!
    isAdmin: Boolean!
}

type BaseUser implements User {
    id: UUID!
    name: String!
    displayName: String!
    color: String!
    isBanned: Boolean!
    createdAt: Time!
    avatarUrl: String!
    isAdmin: Boolean!
}

type AuthedUser implements User {
    id: UUID!
    name: String!
    displayName: String!
    color: String!
    isBanned: Boolean!
    createdAt: Time!
    avatarUrl: String!
    isAdmin: Boolean!
    providers: [AuthedUserProvider!]!
    streamKey: UUID!
    sevenTvEmoteSetId: String
}

enum AuthedUserProviderType {
    TWITCH
    GITHUB
}

type AuthedUserProvider {
    provider: AuthedUserProviderType!
    userId: String!
    name: String!
    displayName: String!
    avatarUrl: String!
}

input UpdateUserProfileInput {
    color: String
    name: String
    displayName: String
    sevenTvEmoteSetId: String
    avatarUrl: String
}