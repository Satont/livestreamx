extend type Query {
    roles: [Role!]! @isAuthenticated
}

extend type Mutation {
    createRole(input: CreateRoleInput!): Role! @isAuthenticated
    updateRole(id: UUID!, input: UpdateRoleInput!): Role! @isAuthenticated
    deleteRole(id: UUID!): Boolean! @isAuthenticated
    userAssigneRole(userId: UUID!, roleId: UUID!): Boolean! @isAuthenticated
    userUnassignRole(userId: UUID!, roleId: UUID!): Boolean! @isAuthenticated
}

type Role {
    id: UUID!
    channelId: UUID!
    name: String!
    imageUrl: String
    features: [RoleFeature!]!
}

enum RoleFeature {
    BAN_USERS
}

input CreateRoleInput {
    name: String!
    imageUrl: String
    features: [RoleFeature!]!
}

input UpdateRoleInput {
    name: String
    imageUrl: String
    features: [RoleFeature!]
}