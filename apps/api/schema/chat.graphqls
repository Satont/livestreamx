extend type Query {
    chatMessagesLatest(channelID: UUID!, limit: Int): [ChatMessage!]!
    getEmotes(channelID: UUID!): [Emote!]!
}

extend type Mutation {
    sendMessage(input: SendMessageInput!): Boolean! @isAuthenticated @notBanned
    attachFile(file: Upload!): AttachedFile! @isAuthenticated @notBanned
    addReaction(messageId: String!, content: String!, channelID: UUID!): Boolean! @isAuthenticated @notBanned
}

extend type Subscription {
    chatMessages(channelID: UUID!): ChatMessage!
    systemMessages(channelID: UUID!): SystemMessage!
    reactionAdd(channelID: UUID!): ChatMessageReaction!
}

type ChatUser implements User {
    id: UUID!
    name: String!
    displayName: String!
    color: String!
    isBanned: Boolean!
    createdAt: Time!
    avatarUrl: String!
    isAdmin: Boolean!
    roles: [Role!]! @goField(forceResolver: true)
}

type ChatMessage {
    id: ID!
    channelId: UUID!
    segments: [MessageSegment!]!
    senderId: UUID!
    sender: ChatUser! @goField(forceResolver: true)
    createdAt: Time!
    reactions: [ChatMessageReaction!]!
    replyTo: UUID
}

enum MessageSegmentType {
    TEXT
    LINK
    MENTION
    EMOTE
}

interface MessageSegment {
    type: MessageSegmentType!
    content: String!
}

input SendMessageInput {
    channelId: UUID!
    text: String!
    replyTo: UUID
}

type MessageSegmentText implements MessageSegment {
    content: String!
    type: MessageSegmentType!
}

type MessageSegmentLink implements MessageSegment {
    content: String!
    type: MessageSegmentType!
}

type MessageSegmentMention implements MessageSegment {
    content: String!
    type: MessageSegmentType!
    userId: UUID!
    user: ChatUser! @goField(forceResolver: true)
}

type MessageSegmentEmote implements MessageSegment {
    content: String!
    type: MessageSegmentType!
    emote: Emote!
}

type AttachedFile {
    id: ID!
    url: String!
    name: String!
    size: Int!
    mimeType: String!
    createdAt: Time!
}

enum SystemMessageType {
    EMOTE_ADDED
    EMOTE_REMOVED
    EMOTE_UPDATED
    KICK_MESSAGE
    USER_JOINED
}

interface SystemMessage {
    type: SystemMessageType!
    createdAt: Time!
}

type Emote {
    id: String!
    name: String!
    url: String!
    width: Int!
    height: Int!
}

type SystemMessageEmoteActor {
    id: String!
    name: String!
    displayName: String!
}

type SystemMessageEmoteAdded implements SystemMessage {
    type: SystemMessageType!
    emote: Emote!
    createdAt: Time!
    actor: SystemMessageEmoteActor!
}

type SystemMessageEmoteRemoved implements SystemMessage {
    type: SystemMessageType!
    emote: Emote!
    createdAt: Time!
    actor: SystemMessageEmoteActor!
}

type SystemMessageEmoteUpdated implements SystemMessage {
    type: SystemMessageType!
    emote: Emote!
    createdAt: Time!
    actor: SystemMessageEmoteActor!
}

type SystemMessageKickMessage implements SystemMessage {
    type: SystemMessageType!
    senderName: String!
    senderColor: String!
    message: String!
    createdAt: Time!
}


type SystemMessageUserJoined implements SystemMessage {
    type: SystemMessageType!
    createdAt: Time!
    user: BaseUser
}

enum ChatMessageReactionType {
    EMOJI
    EMOTE
}

interface ChatMessageReaction {
    id: String!
    type: ChatMessageReactionType!
    userId: UUID!
    user: ChatUser!
    reaction: String!
    messageId: String!
    channelID: UUID!
}

type ChatMessageReactionEmoji implements ChatMessageReaction {
    id: String!
    type: ChatMessageReactionType!
    userId: UUID!
    user: ChatUser! @goField(forceResolver: true)
    reaction: String!
    messageId: String!
    channelID: UUID!
}

type ChatMessageReactionEmote implements ChatMessageReaction {
    id: String!
    type: ChatMessageReactionType!
    userId: UUID!
    user: ChatUser! @goField(forceResolver: true)
    reaction: String!
    emote: Emote!
    messageId: String!
    channelID: UUID!
}